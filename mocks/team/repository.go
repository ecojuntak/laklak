// Code generated by mockery v2.43.2. DO NOT EDIT.

package team

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	team "github.com/ecojuntak/laklak/gen/go/v1/team"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockRepository) Create(ctx context.Context, _a1 *team.Team) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *team.Team) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *team.Team
func (_e *MockRepository_Expecter) Create(ctx interface{}, _a1 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, _a1 *team.Team)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*team.Team))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *team.Team) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetTeam(ctx context.Context, id int32) (*team.Team, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *team.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*team.Team, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *team.Team); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*team.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockRepository_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockRepository_Expecter) GetTeam(ctx interface{}, id interface{}) *MockRepository_GetTeam_Call {
	return &MockRepository_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, id)}
}

func (_c *MockRepository_GetTeam_Call) Run(run func(ctx context.Context, id int32)) *MockRepository_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockRepository_GetTeam_Call) Return(_a0 *team.Team, _a1 error) *MockRepository_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTeam_Call) RunAndReturn(run func(context.Context, int32) (*team.Team, error)) *MockRepository_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockRepository) GetTeams(ctx context.Context) ([]*team.Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*team.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*team.Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*team.Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*team.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockRepository_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetTeams(ctx interface{}) *MockRepository_GetTeams_Call {
	return &MockRepository_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockRepository_GetTeams_Call) Run(run func(ctx context.Context)) *MockRepository_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetTeams_Call) Return(_a0 []*team.Team, _a1 error) *MockRepository_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTeams_Call) RunAndReturn(run func(context.Context) ([]*team.Team, error)) *MockRepository_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
